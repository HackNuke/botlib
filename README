OBJR
####

| Welcome to OBJR, the objector ! see https://pypi.org/project/objr/ 


| OBJR is a bot based on the OLIB and OMOD packages.
| OLIB is a object library and uses timestamped, type in filename, JSON stringified, files on filesystem backend.
| OMOD is a package of modules for the OLIB library and provides RSS feed fetching, UDP to IRC gateway and is self programmable.

| OLIB,OMOD and OBJR have been placed in the Public Domain and contain no copyright or LICENSE, this makes OBJR truely free (pastable) code you can use how you see fit, 

OBJR can serve as a 24/7 background daaemon in an IRC channel, it can work as a UDP to IRC relay, has user management to limit access to prefered users and 
can run as a service to let it restart after reboots. 

installation is through pypi:

 > sudo pip3 install objr --upgrade --force-reinstall

you can also run directly from the tarball, see https://pypi.org/project/objr/#files

USAGE
=====

OBJR has it's own CLI, you can run it by giving the objr command on the
prompt, it will return with no response:

:: 

 $ objr
 $ 

you can use objr <cmd> to run a command directly:

::

 $ objr cmds
 cfg|cmd|dne|edt|fnd|flt|krn|log|add|tsk|tdo|udp|upt|ver

configuration is done with the cfg command:

::

 $ objr cfg
 channel=#botlib nick=objr port=6667 realname=objr server=localhost username=objr

you can use setters to edit fields in a configuration:

::

 $ objr cfg server=irc.freenode.net channel=\#dunkbots nick=objr
 channel=#dunkbots nick=botje port=6667 realname=botlib server=irc.freenode.net
 username=botlib

to start a irc server with the cmd and opr modules loaded and a console
running:

::

 $ objr mods=irc,csl,cmd,opr
 > ps
 0 0s       Console.input
 1 0s       IRC.handler
 2 0s       IRC.input
 3 0s       IRC.output
 4 0s       Kernel.handler
 > 

RSS
===

OBJR provides with the use of feedparser the possibility to server rss
feeds in your channel. adding rss to mods= will load the rss modules and
start it's poller.

::

 $ objr mods=rss

to add an url use the rss command with an url:

::

 $ objr rss https://github.com/bthate/objr/commits/master.atom
 ok 1

run the rss command to see what urls are registered:

::

 $ objr fnd rss
 0 https://github.com/bthate/objr/commits/master.atom

the fetch command can be used to poll the added feeds:

::

 $ objr fetch
 fetched 0

UDP
===

OBJR also has the possibility to serve as a UDP to IRC relay where you
can send UDP packages to the bot and have txt displayed on the channel.

use the objr program to send text via the bot to the channel on the irc server:

::

 $ tail -f /var/log/syslog | objr udp

to send the tail output to the IRC channel

you can use python3 code to send a UDP packet to objr, it's unencrypted
txt send to the bot and display on the joined channels.

to send a udp packet to okbot in python3:

::

 import socket

 def toudp(host=localhost, port=5500, txt=""):
     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
     sock.sendto(bytes(txt.strip(), "utf-8"), host, port)

MODULES
=======

The OLIB package has the following modules:

::

    ol	 	- object library
    ol.bus	- announce
    ol.csl	- console
    ol.dbs	- databases
    ol.hdl	- handler
    ol.krn	- kernel
    ol.prs 	- parser
    ol.tms	- times
    ol.trm	- terminal
    ol.tsk	- tasks
    ol.utl	- utilities

OMOD has the following modules available:

::

   omod.cmd	- command
   omod.edt	- edit
   omod.ent	- enter log and todo items
   omod.fnd	- find typed objects
   omod.mbx	- mailbox
   omod.rss	- rich site syndicate
   omod.udp	- UDP to IRC gateway

OBJR has 1 module, the omod.irc module:

::

   omod.irc

this package add omod.irc to the omod namespace.

you can add you own modules to the omod package, its a namespace package.


SERVICE
=======

if you want to run the bot 24/7 you can install OBJR as a service for
the systemd daemon. You can do this by copying the following into
the /etc/systemd/system/objr.service file:

::


 [Unit]
 Description=OBJR - the objector
 After=network-online.target
 Wants=network-online.target

 [Service]
 User=objr
 Group=objr
 ExecStart=/usr/local/bin/objr -n

 [Install]
 WantedBy=multi-user.target

create a homedir for objr:

::

 $ mkdir /home/objr
 $ mkdir /home/objr/.objr
 $ mkdir /home/objr/.objr/omod

add the objr user to the system:

::

 $ groupadd objr
 $ chown -R objr:objr /home/objr
 $ useradd objr -d /home/objr
 $ passwd objr

configure objr to connect to irc:

::

 $ sudo -u objr objr cfg server=irc.freenode.net channel=#objr nick=objr

copy modules over to objr's work directory:

::

 $ cp -Ra mods/*.py /home/objr/.objr/omod

make sure permissions are set properly:

::

 $ chown -R objr:objr /home/objr
 $ chown -R objr:objr /home/objr/.objr
 $ chmod -R 700 /home/objr/.objr/omod/
 $ chmod -R 400 /home/objr/.objr/omod/*.py

add the objr service with:

::

 $ sudo systemctl enable objr
 $ sudo systemctl daemon-reload

then restart the objr service.

::

 $ sudo service objr stop
 $ sudo service objr start

if you don't want objr to startup at boot, remove the service file:

::

 $ sudo rm /etc/systemd/system/objr.service

CONTACT
=======

contact me on IRC/freenode/#dunkbots or email me at bthate@dds.nl

| Bart Thate (bthate@dds.nl, thatebart@gmail.com)
| botfather on #dunkbots irc.freenode.net
