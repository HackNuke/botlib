#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#

""" program to easily replace text. """

import os; import sys; sys.path.insert(0, os.getcwd())

from botlib.template import  opts_defs_sed
from botlib.utils import make_opts, highest
from botlib.log import loglevel
from botlib.object import Object

import logging
import re
import shutil

def run_sed(filename, sedstring):
    """ replace text in file, sedstring format is s#match#replace#. """
    f = open(filename, 'r')
    tmp = filename + '.tmp'
    fout = open(tmp, 'w')
    if sedstring:
        char = "#"
        seds = sedstring.split(char)
        fr = seds[1]
        to = seds[2]
        for line in f:
            l = re.sub(fr, to, line)
            fout.write(l)
    else:
        for line in f:
            l = re.sub("\t", "    ", line.rstrip() + "\n")
            fout.write(l)
    fout.flush()
    fout.close()
    os.rename(tmp, filename)

def do_replace(ddir, sedstring, allowed=""):
    """ replace text in all files in a directory. """
    logging.info("! dir %s" % ddir)
    target = ddir
    for f in os.listdir(ddir):
        if "__" in f and "init" not in f:
            continue
        if ".hg" in f:
            continue
        if f.endswith("~"):
            continue
        target = ddir + os.sep + f
        if allowed in f:
            run_sed(target, sedstring)
        if os.path.isdir(target):
            do_replace(target, sedstring, allowed)

def sed():
    """ bot-sed program to easily replace text. """
    opts, args = make_opts(opts_defs_sed)
    config = Object()
    config.merge(vars(opts))
    level = config.get("loglevel", None) or "error"
    loglevel(level)
    dir_sed = config.get("dir_sed", None) or os.getcwd()
    try:
        str_sed = args[0]
    except IndexError:
        print("bot-sed s#match#replace#")
        return
    base, fn = os.path.split(dir_sed)
    target = highest(base, fn)
    print(base, target)
    shutil.copytree(dir_sed, base + os.sep + target)
    do_replace(base + os.sep + target, str_sed, ".py")
    do_replace(base + os.sep + target + os.sep + "bin", str_sed, "")
    os.popen("chmod +x %s" % base + os.sep + target + os.sep + "bin")

sed()
