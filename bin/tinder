#!/usr/bin/env python3
# This file is placed in the Public Domain.


import os
import random
import shutil
import sys
import termios
import time


from bot.clt import Client
from bot.obj import Cfg, Object, cdir
from bot.run import Runtime
from bot.tbl import Table
from bot.thr import launch
from bot.tms import elapsed


Cfg.wd = ".test"


events = []


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = ["cfg", "log", "rss", "log txt==test", "cfg server==localhost", "rss rss==reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]


class Console(Client):

    def __init__(self):
        super().__init__()
        k.add(self)
        
    def handle(self, clt, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


clt = Console()


def consume():
    fixed = []
    res = []
    for e in events:
        e.wait()
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue
    return res


def exec():
    print("yo!")
    c = k.first()
    cmds = list(Table.modnames)
    random.shuffle(cmds)
    for cmd in cmds:
        for ex in getattr(param, cmd, [""]):
            e = c.event(cmd + " " + ex)
            k.dispatch(e)
            events.append(e)


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


import bot.all


def main():
    if os.path.exists(Cfg.wd):
        shutil.rmtree(Cfg.wd)
        os.sync()
    else:
        cdir(Cfg.wd)
    k.parse_cli()
    k.cfg.debug = True
    k.start()
    clt.start()
    thrs = []
    nr = k.cfg.index or 1
    t = time.time()
    for x in range(nr):
        thr = launch(exec, name="task%s" % x)
        thrs.append(thr)
    for thr in thrs:
        thr.join()
    consume()
    print(elapsed(time.time()-t))

wrap(main)
