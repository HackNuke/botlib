#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__  = 120

## IMPORT ##

import atexit

import os
import readline
import sys
import termios
import sys 

sys.path.insert(0, "bot")
sys.path.insert(0, "mod")

import obj

from hdl import Client
from krn import Kernel
from obj import Names, fmt
from run import opts
from ver import __version__

## TERMINAL ##

cmds = []
resume = {}

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def complete(text, state):
    matches = []
    if text:
        matches = [s for s in cmds if s and s.startswith(text)]
    else:
        matches = cmds[:]
    try:
        return matches[state]
    except IndexError:
        return None

def exec(main):
    termsave()
    try:
        main()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

def setcompleter(commands):
    cmds.extend(commands)
    readline.set_completer(complete)
    readline.parse_and_bind("tab: complete")
    atexit.register(lambda: readline.set_completer(None))

## MAIN ##

class CLI(Client):

    def raw(self, txt):
        print(txt)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def main():
    obj.wd = os.path.expanduser("~/.bot")
    k = Kernel()
    k.boot("bot", __version__)
    k.scan("mod")
    if k.cfg.txt:
        c = CLI()
        setcompleter(Names.modules)
        return c.cmd(k.cfg.otxt)
    if k.cfg.mods or opts("c"):
        c = Console()
        k.inits(k.cfg.mods)
        c.start()
        c.wait()

exec(main)
