#!/usr/bin/python3 -u
# BOTLIB - the bot library !
#
#

## imports

#import os, sys ; sys.path.insert(0, os.getcwd())

from bot.spc import Console, Kernel
from bot.spc import execute, os, parse_cli

from bot.krn import __version__

## defines

opts = [
    ('-l', '--loglevel', 'store', str, "debug", 'set loglevel.', 'level'),
    ('-o', '--options', 'store', str, "", "options to use", 'options'),
    ('-w', '--workdir', 'store', str, os.path.expanduser("~/.bot"), "directory to work on", 'workdir'),
]


txt="""[Unit]
Description=BOTD - the 24/7 IRC channel daemon
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/usr/local/bin/bot daemon

[Install]
WantedBy=multi-user.target
"""


## functions

def daemon(event):
    k = Kernel()
    k.scan("bot")
    k.start()
    k.init("bot.irc,bot.rss")
    k.wait()
    os._exit(0)
    
def hup(event):
    if not root():
        event.reply("you need root permission.")
        return
    for x in os.popen("service botd stop").readlines():
        print(x.rstrip())
    for x in os.popen("service botd start").readlines():
        print(x.rstrip())
    for x in os.popen("systemctl status botd --no-pager").readlines():
        print(x.rstrip())
    event.reply("ok")
    os._exit(0)
    
def install(event):
    if not root():
        event.reply("you need root permission.")
        return
    f = open("/etc/systemd/system/botd.service", "w")
    f.write(txt)
    f.close()
    os.popen("systemctl enable botd")
    os.popen("systemctl daemon-reload")
    event.reply("ok")
    os._exit(0)

def remove(event):
    if not root():
        event.reply("you need root permission.")
        return
    p = "/etc/systemd/system/botd.service"
    if os.path.exists(p):
        for l in os.popen("rm %s" % p).readlines():
            print(l) 
    event.reply("ok")
    os._exit(0)

## main

def main():
    cfg = parse_cli("bot", opts, version=__version__)
    k = Kernel(cfg)
    k.scan(cfg.name)
    if cfg.txt:
        return k.cmd(cfg.txt)
    k.start(cfg)
    c = Console()
    c.start()
    k.wait()
       
execute(main)
