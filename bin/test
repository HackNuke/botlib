#!/usr/bin/env python3
# This file is placed in the Public Domain.

"python3 object library"

__version__ = 124

import os, sys

sys.path.insert(0, os.getcwd())

import atexit
import doctest
import os
import readline
import shutil
import sys
import termios
import unittest

wd = ".test"

from bot.krn import Kernel, Test
from bot.hdl import Handler


flags = doctest.REPORT_NDIFF | doctest.FAIL_FAST | doctest.ELLIPSIS
resume = {}

class Runtime(Kernel):

    def error(self, txt):
        print(txt)


k = Runtime()

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()


def ver(event):
    event.reply("BOTLIB %s" % __version__)


def main():
    if os.path.exists(".test"):
        shutil.rmtree(".test")
    k.boot()
    k.add(ver)
    k.scan("bot")
    k.cfg.verbose = k.opts("v")
    for cls in k.classes.values():
        c = cls()
        c.txt = "bla"
        c.save()
    k.start()
    c = Test()
    c.start()
    pat = "test_%s*" % "*"
    suite = unittest.loader.TestLoader().discover("test", pattern=pat)
    unittest.TextTestRunner(verbosity=3).run(suite)
    doctest.testfile(
        "../test/test1.txt", optionflags=flags, report=False, verbose=False
    )
    doctest.testfile(
        "../test/test2.txt", optionflags=flags, report=False, verbose=False
    )


wrap(main)
