#!/usr/bin/env python3
# This file is placed in the Public Domain.

"python3 object library"

import os, sys

sys.path.insert(0, os.getcwd())

import atexit
import botl
import doctest
import os
import readline
import shutil
import sys
import termios
import unittest
import botl.obj

botl.obj.wd = ".test"

from botl.krn import Kernel
from botl.hdl import Handler
from botl.krn import Test

import botl.all
import botm.all

flags = doctest.REPORT_NDIFF | doctest.FAIL_FAST | doctest.ELLIPSIS
resume = {}

class Runtime(Kernel):

    def error(self, txt):
        print(txt)


class Test(Handler):
    def handle(self, e):
        k = kernel()
        k.put(e)

    def raw(self, txt):
        if k.cfg.verbose:
            print(txt)

k = Runtime()

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()


def main():
    if os.path.exists(".test"):
        shutil.rmtree(".test")
    k.boot("test")
    k.scan("bot")
    k.cfg.verbose = k.opts("v")
    for cls in k.classes.values():
        c = cls()
        c.txt = "bla"
        c.save()
    k.start()
    c = Test()
    c.start()
    pat = "test_%s*" % "*"
    suite = unittest.loader.TestLoader().discover("test", pattern=pat)
    unittest.TextTestRunner(verbosity=3).run(suite)
    doctest.testfile(
        "../test/test1.txt", optionflags=flags, report=False, verbose=False
    )
    doctest.testfile(
        "../test/test2.txt", optionflags=flags, report=False, verbose=False
    )


wrap(main)
