#!/usr/bin/env python3
# This file is placed in the Public Domain.

import doctest
import os
import readline
import shutil
import sys
import termios
import unittest

from bot.obj import save, values
from bot.run import Client, Runtime
from bot.tbl import Table


flags = doctest.REPORT_NDIFF | doctest.FAIL_FAST | doctest.ELLIPSIS
wd = ".test"


class Kernel(Runtime):

    def error(self, txt):
        print(txt)
        sys.stdout.flush()


    def log(self, txt):
        print(txt)
        sys.stdout.flush()

class Silent(Client):

    def raw(self, txt):
        if k.opt("v"):
            print(txt)


class Test(Client):

    def raw(self, txt):
        print(txt)


clt = Silent()
tst = Test()
k = Kernel()
t = Table()


import bot.all


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except KeyboardInterrupt:
        pass
    except PermissionError as ex:
        print(str(ex))
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


def main():
    global clt
    if os.path.exists(".test"):
        shutil.rmtree(".test")
    k.boot()
    k.cfg.debug = True
    k.cfg.bork = True
    t.scan("bot")
    for cls in values(t.classes):
        try:
            c = cls()
        except TypeError:
            try:
                c = cls("cmd")
            except TypeError:
                c = cls("cmd", 500)
        c.txt = "bla"
        save(c)
    k.start()
    clt.start()
    pat = "test_%s*" % "*"
    suite = unittest.loader.TestLoader().discover("test", pattern=pat)
    unittest.TextTestRunner(verbosity=3).run(suite)
    clt = Test()
    doctest.testfile(
        "../test/test1.txt", optionflags=flags, globs=globals(),report=False, verbose=False
    )
    doctest.testfile(
        "../test/test2.txt", optionflags=flags, globs=globals(), report=False, verbose=False
    )


wrap(main)
