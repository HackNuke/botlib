#!/usr/bin/env python3
# This file is placed in the Public Domain.


import os, sys ; sys.path.insert(0, os.getcwd())


import doctest
import json
import os
import reproducible
import shutil
import time
import unittest


from bot.clt import Client
from bot.obj import Cfg, Object, cdir, indexed
from bot.krn import k
from bot.ofn import diff, dump, fmt, loadp, savep
from bot.run import Runtime
from bot.run import Cfg as RunCfg


Cfg.wd = ".test"


flags = doctest.REPORT_NDIFF | doctest.FAIL_FAST | doctest.ELLIPSIS


class CLI(Client):

    def __init__(self):
        super().__init__()
        k.add(self)

    def raw(self, txt):
        global results
        indexed(results, txt)

clt = CLI()
origs = Object()
results = Object()


import bot.all


pat = "test_%s*" % "*"
r = ".test"
rcfg = os.path.join(r, "config.yaml")
rs = os.path.join(r, "store")
res = os.path.join(r, "results")


def main():
    global results
    global origs
    k.parse_cli()
    k.stdout = sys.stdout
    k.cfg.debug = True
    k.cfg.mod = "irc,rss"
    loadp(origs, res)
    if os.path.exists(rs):
        shutil.rmtree(rs)
        os.sync()
    else:
        cdir(rs)
    context = reproducible.Context()
    context.add_repo(path='.', allow_dirty=True, diff=True)
    clt.start()
    suite = unittest.loader.TestLoader().discover("test", pattern=pat)
    unittest.TextTestRunner(verbosity=3).run(suite)
    savep(results, res)
    context.export_yaml(rcfg)
    context.add_file(res, category='output')
    k.log(fmt(results, newline=True))
    d = diff(origs, results)
    k.stdout.write("\n")
    k.log(str(d))
    k.stdout.write("\n")
    k.stdout.flush()

main()
