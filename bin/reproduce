#!/usr/bin/env python3
# This file is placed in the Public Domain.


import os, sys ; sys.path.insert(0, os.getcwd())


import doctest
import json
import os
import reproducible
import time
import unittest


from bot.clt import Client
from bot.krn import getmain
from bot.obj import Cfg, Object, diff, indexed
from bot.ofn import dump, fmt, loadp, savep
from bot.run import Runtime
from bot.run import Cfg as RunCfg


Cfg.wd = ".reproduce"


context = reproducible.Context()
context.add_repo(path='.', allow_dirty=True, diff=True)


flags = doctest.REPORT_NDIFF | doctest.FAIL_FAST | doctest.ELLIPSIS


class Kernel(Runtime):

    def error(self, txt):
        print(txt)
        sys.stdout.flush()

    def log(self, txt):
        k = getmain("k")
        if k.cfg.verbose:
            print(txt)
            sys.stdout.flush()


k = Runtime()


class CLI(Client):

    def __init__(self):
        super().__init__()
        k.add(self)

    def raw(self, txt):
        indexed(results, txt)
        if k.cfg.verbose:
            print(txt)
            sys.stdout.flush()


clt = CLI()
results = Object()


import bot.all


def main():
    k.parse_cli()
    k.cfg.debug = True
    k.cfg.mod = "irc,rss"
    pat = "test_%s*" % "*"
    origs = Object()
    os.popen("rm -fR .reproduce/store")
    loadp(origs, ".reproduce/results")
    suite = unittest.loader.TestLoader().discover("test", pattern=pat)
    unittest.TextTestRunner(verbosity=3).run(suite)
    savep(results, ".reproduce/results")
    context.add_file('.reproduce/results', category='output')
    context.export_yaml('.reproduce/config.yaml')
    if k.cfg.verbose:
       print(fmt(results, newline=True))
       print(diff(origs, results))

main()
