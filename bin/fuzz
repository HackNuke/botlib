#!/usr/bin/env python3
# This file is placed in the Public Domain.


"bot fuzzer"


import doctest
import os
import inspect
import random
import shutil
import string
import sys
import termios
import time
import threading
import traceback
import unittest


sys.path.insert(0, os.getcwd())


from ob.bus import Bus
from ob.clt import Client
from ob.cmd import Cmd
from ob.evt import Event
from ob.dbs import find, fntime, last, listfiles, save
from ob.hdl import Handler
from ob.krn import Cfg, boot
from ob.fnc import edit, format
from ob.prs import elapsed, parse
from ob.tbl import Tbl
from ob.thr import errors, getname, launch


from ob import Object, get, items, keys, values, update


def cb(event):
    print("callback in %s" % event)


Cfg.wd = ".test"


errors2 = []
events = []
exclude = ["output", "some", "keep", "wait", "loop", "handle", "poll", "event", "handler", "input", "doconnect", "raw", "start"]
exc = []
missing = []
results = []


import bot.bsc


starttime = time.time()


class CLI(Client, Handler):

    def __init__(self):
        Client.__init__(self)
        Handler.__init__(self)


    def handle(self, e):
        super().handle(e)

    def raw(self, txt):
        results.append(txt)
        if Cfg.verbose:
            print(txt)


def get_args(obj):
    try:
        sig = inspect.signature(obj)
    except ValueError:
        return []
    if sig.parameters:
        return get_values(sig.parameters.keys())
    return []

def get_values(v):
    print(v)
    args = []
    for k in v:
        res = get(default, k, None)
        if res:
            args.append(res)
        else:
            if k not in missing:
                missing.append(k)
    print(args)
    return args


def pay(mod, *args, **kwargs):
    if Cfg.verbose:
        print(mod)
    for k in dir(mod):
        if k.startswith("_" or k in exclude):
            continue
        obj = getattr(mod, k)
        print(type(obj))
        args = get_args(obj)
        o = obj(*args)
        if isinstance(o, Object):
            for k in dir(o):
                if k.startswith("_" or k in exclude):
                    continue
                f = getattr(o, k, None)
                if f:
                    args = get_args(f)
                    f(o, *args)


def consume(events):
    fixed = []
    res = []
    for e in events:
        e.wait()
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue
    return res


def payload():
    mods = list(Tbl.mod)
    random.shuffle(mods)
    thrs = []
    for mod in mods:
        pay(mod)

def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


#import ob.all
import bot.all


def main():
    print("BOT fuzzer start at %s" % time.ctime(time.time()).replace("  ", " "))
    boot(" ".join(sys.argv[1:]))
    Cfg.debug = True
    c = CLI()
    c.start()
    thrs = []
    nrs = Cfg.index or 10
    for nr in range(nrs):
        time.sleep(0.01)
        payload()
    consume(events)
    for res in results:
        print(res)
    for err in errors:
        fr = err.__traceback__.tb_frame
        ln = fr.f_lineno
        fn = fr.f_code.co_filename
        print("%s %s:%s" % (err, fn, ln))
    for err in errors2:
        print(err)
    print(missing)
    print(elapsed(time.time()-starttime))




default = Object()
default["o"] = Object()
default["txt"] = "yoo"
default["key"] = "txt"
default["value"] = Object()
default["d"] = {}
default["c"] = Handler()
default["event"] = Event()
default["path"] = Cfg.wd
default["channel"] = "#ob"
default["orig"] = repr(default["c"])
default["obj"] = Object()
default["d"] = {}
default["value"] = 1
default["pkgnames"] = "ob"
default["name"] = "ob"
default["callback"] = cb
default["e"] = Event()
default["mod"] = bot.bsc
default["mns"] = "irc,udp,rss"
default["sleep"] = 60.0
default["func"] = cb
default["origin"] = "test@shell"
default["perm"] = "USER"
default["permission"] = "USER"
default["text"] = "yoo"
default["server"] = "localhost"
default["nick"] = "ob"
default["rssobj"] = Object()
default["handler"] = Handler()
default["dccevent"] = Event()
default["cmd"] = "cmd"
default["selector"] = {"txt": "test"}
default["newline"] = True
default["skip"] = False
default["empty"] = False
default["index"] = 10
default["timed"] = True
default["setter"] = {"txt": "test"}
default["skipped"] = False
default["data"] = Event()
default["skiplist"] = []
default["pn"] = "ob"
default["mns"] = ["irc", "rss", "udp", "bsc"]
default["obj"] = Object()
default["function"] = cb
default["k"] = "txt"
default["format_spec"] = "%s"
default["v"] = "value"
default["protocol"] = "v1"
default["scan_once"] = True
default["strict"] = False
default["object_hook"] = Object
default["object_pairs_hook"] = Object
default["memo"] = "nope"
default["_w"] = "bla"
default["_ws"] = "bla"
default["s"] = "stringified"
default["__idx__"] = 10
default['_one_shot'] = True
default["o2"] = Object()
default["f"] = ".test/test"
default["skiplist"] = ["txt",]
default["keyz"] = ["txt",]
default["opath"] = default["f"]
default["d"] = {}
default["timeout"] = 1.0
default["func"] = cb
default["ptxt"] = "upt"
default["width"] = 5
default["fillchar"] = " "
default["encoding"] = "utf-8"
default["errors"] = False
default["tabsize"] = 4
default["iterable"] = Object()
default["chars"] = string.printable 
default["sep"] = "\n"
default["prefix"] = "tob"
default["suffix"] = ".py"
default["old"] = Object()
default["new"] = Object()
default["count"] = 5
default["maxsplit"] = 80
default["keepends"] = True
default["table"] = Object()
default["string"] = ""
default["iterable_of bytes"] = [bytes("bla1", "utf-8"), bytes("bla2", "utf-8")]
default["bytes"] = bytes("bytes1", "utf-8")
default["to"] = time.time()
default["delete"] = False
default["byteorder"] = False
default["length"] = 80
default["object"] = Object
default["start"] = time.time() - 3600
default["stop"] = time.time()
default["sub"] = "tes"

wrap(main)
