#!/usr/bin/env python3
# This file is placed in the Public Domain.


"bot fuzzer"


import doctest
import os
import inspect
import random
import shutil
import string
import sys
import termios
import time
import threading
import traceback
import unittest


sys.path.insert(0, os.getcwd())


from ob.bus import Bus
from ob.cmd import Cmd
from ob.evt import Event
from ob.dbs import find, fntime, last, listfiles, save
from ob.krn import Cfg, boot
from ob.obj import Object, get, items, keys, values, update
from ob.fnc import edit, format, index
from ob.prs import elapsed, parse
from ob.tbl import Tbl
from ob.thr import getname, launch



starttime = time.time()


def get_values(v):
    args = []
    for k in v:
        res = get(default, k, None)
        if res:
            args.append(res)
        else:
            if k not in missing:
                missing.append(k)
    return args


def handle_error(ex, txt=None):
    t = str(type(ex))
    if t not in errors:
        errors[t] = ex
        if txt:
            errors[t].txt = txt


def pay(mod, *args, **kwargs):
    if Cfg.verbose:
        print(mod)
    for k in dir(mod):
        print(k)
        if k.startswith("_" or k in exclude):
            continue
        obj = getattr(mod, k)
        try:
            spec = inspect.getfullargspec(obj)
            args = get_values(spec.args[1:])
            o = obj(*args)
        except Exception as ex:
            handle_error(ex, get_exception())
            continue
        for k in dir(o):
            if k.startswith("_" or k in exclude):
                continue
            f = getattr(o, k, None)
            if f:
                try:
                    spec = inspect.getfullargspec(f)
                    args = get_values(spec.args[1:])
                    res = launch(f,*args)
                except Exception as ex:
                    handle_error(ex, get_exception())


def cb(event):
    print("callback in %s" % event)


Cfg.wd = ".test"


events = []
errors = Object()
exclude = ["output", "some", "keep", "wait", "loop", "handle", "poll", "event", "handler", "input", "doconnect", "raw", "start"]
exc = []
missing = []
results = []


import mod.bsc


default = Object()
default["o"] = Object()
default["txt"] = "yoo"
default["key"] = "txt"
default["value"] = Object()
default["d"] = {}
default["c"] = Handler()
default["event"] = Event()
default["path"] = Cfg.wd
default["channel"] = "#ob"
default["orig"] = repr(default["c"])
default["obj"] = Object()
default["d"] = {}
default["value"] = 1
default["pkgnames"] = "ob"
default["name"] = "ob"
default["callback"] = cb
default["e"] = Event()
default["mod"] = mod.bsc
default["mns"] = "irc,udp,rss"
default["sleep"] = 60.0
default["func"] = cb
default["origin"] = "test@shell"
default["perm"] = "USER"
default["permission"] = "USER"
default["text"] = "yoo"
default["server"] = "localhost"
default["nick"] = "ob"
default["rssobj"] = Object()
default["handler"] = Handler()
default["dccevent"] = Event()
default["cmd"] = "cmd"
default["selector"] = {"txt": "test"}
default["newline"] = True
default["skip"] = False
default["empty"] = False
default["index"] = 10
default["timed"] = True
default["setter"] = {"txt": "test"}
default["skipped"] = False
default["data"] = Event()
default["skiplist"] = []
default["pn"] = "ob"
default["mns"] = ["irc", "rss", "udp", "bsc"]
default["obj"] = Object()
default["function"] = cb
default["k"] = "txt"
default["format_spec"] = "%s"
default["v"] = "value"
default["protocol"] = "v1"
default["scan_once"] = True
default["strict"] = False
default["object_hook"] = Object
default["object_pairs_hook"] = Object
default["memo"] = "nope"
default["_w"] = "bla"
default["_ws"] = "bla"
default["s"] = "stringified"
default["__idx__"] = 10
default['_one_shot'] = True
default["o2"] = Object()
default["f"] = ".test/test"
default["skiplist"] = ["txt",]
default["keyz"] = ["txt",]
default["opath"] = default["f"]
default["d"] = {}
default["timeout"] = 1.0
default["func"] = cb
default["ptxt"] = "upt"
default["width"] = 5
default["fillchar"] = " "
default["encoding"] = "utf-8"
default["errors"] = False
default["tabsize"] = 4
default["iterable"] = Object()
default["chars"] = string.printable 
default["sep"] = "\n"
default["prefix"] = "tob"
default["suffix"] = ".py"
default["old"] = Object()
default["new"] = Object()
default["count"] = 5
default["maxsplit"] = 80
default["keepends"] = True
default["table"] = Object()
default["string"] = ""
default["iterable_of bytes"] = [bytes("bla1", "utf-8"), bytes("bla2", "utf-8")]
default["bytes"] = bytes("bytes1", "utf-8")
default["to"] = time.time()
default["delete"] = False
default["byteorder"] = False
default["length"] = 80
default["object"] = Object
default["start"] = time.time() - 3600
default["stop"] = time.time()


class Cfg(Object):

     pass


class CLI(Handler):


    def __init__(self):
        Loop.__init__(self)
        self.cfg = Cfg()

    def handle(self, e):
        super().handle(e)

    def raw(self, txt):
        results.append(txt)
        if Cfg.verbose:
            print(txt)


def consume(events):
    fixed = []
    res = []
    for e in events:
        e.wait()
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue
    return res


def get_exception(txt="", sep=" "):
    exctype, excvalue, tb = sys.exc_info()
    trace = traceback.extract_tb(tb)
    result = []
    for elem in trace:
        if elem[0].endswith(".py"):
            plugfile = elem[0][:-3].split(os.sep)
        else:
            plugfile = elem[0].split(os.sep)
        mod = []
        for element in plugfile[:-2:-1]:
            mod.append(element.split(".")[-1])
        ownname = ".".join(mod[::-1])
        result.append("%s:%s" % (ownname, elem[1]))
    res = "%s %s: %s %s" % (sep.join(result), exctype, excvalue, str(txt))
    del trace
    exc.append(res)
    return res


def getmain(name):
    return getattr(sys.modules["__main__"], name, None)


def payload():
    for mod in Tbl.mod:
        pay(mod)


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


import ot.all
import bot.all


def main():
    print("BOT fuzzer start at %s" % time.ctime(time.time()).replace("  ", " "))
    boot(" ".join(sys.argv[1:]))
    Cfg.debug = True
    c = CLI()
    c.start()
    thrs = []
    nrs = Cfg.index or 1
    for nr in range(nrs):
        time.sleep(0.01)
        thr = launch(payload)
        thrs.append(thr)
    consume(events)
    for res in results:
        print(res)
    for key, val in items(errors):
        print(key, val)
    print(missing)
    print(elapsed(time.time()-starttime))


wrap(main)
