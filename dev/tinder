#!/usr/bin/env python3
# This file is placed in the Public Domain.


import inspect
import os
import shutil
import sys
import termios
import time
import traceback
import unittest


sys.path.insert(0, os.getcwd())


from bot.bus import Bus
from bot.clt import Client
from bot.evt import Event
from bot.dbs import find, fntime, last, listfiles, save
from bot.obj import Object, get, items, keys, values, update
from bot.fnc import edit, format
from bot.hdl import Handler
from bot.krn import Cfg, boot
from bot.prs import elapsed, parse
from bot.tbl import Cls, Cmd, Tbl, scan
from bot.thr import Thr, getname, launch


import bot.all
import bot.mod.all


Cfg.wd = ".test"


errors = []
events = []
param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = ["cfg", "log", "rss", "log txt==test", "cfg server==localhost", "rss rss==reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]
results = []
starttime = time.time()


class CLI(Client, Handler):

    def __init__(self):
        Client.__init__(self)
        Handler.__init__(self)

    def raw(self, txt):
        results.append(txt)
        if Cfg.verbose:
            print(txt)


def consume(events):
    fixed = []
    res = []
    have = []
    for e in events:
        e.wait()
        for err in e.errors:
            if type(err) == TestError:
                continue
            if str(err) not in have:
                have.append(str(err))
                errors.append(err)
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue


def from_exception(ex, txt="", sep=" "):
    result = []
    for fr in traceback.extract_tb(ex.__traceback__):
        result.append("%s:%s" % (os.sep.join(fr.filename.split(os.sep)[-2:]), fr.lineno))
    return "%s(%s) %s" % (getname(ex), ex, " ".join(result))


def payload(c):
    thrs = []
    for cmd in Cmd.cmd:
        for ex in getattr(param, cmd, [""]):
            e = Event()
            e.type = "cmd"
            e.txt = cmd + " " + ex
            e.orig = repr(c)
            thrs.append(launch(c.handle, e))
            events.append(e)
    return thrs


def scan():
    for mod in values(Tbl.mod):
        for k, o in inspect.getmembers(mod, inspect.isfunction):
            if "event" in o.__code__.co_varnames:
                Cmd.cmd[k] = o
        for k, clz in inspect.getmembers(mod, inspect.isclass):
            Cls.add(clz)
        Tbl.add(mod)


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    if errors:
        print("\nthere are errors\n")
        for err in errors:
            traceback.print_exception(type(err), err, err.__traceback__)
    print("\n%s events left (%s)" % (len(events), elapsed(time.time()-starttime)))

def main():
    print("GCD tinder start at %s" % time.ctime(time.time()).replace("  ", " "))
    if os.path.exists(Cfg.wd):
        shutil.rmtree(Cfg.wd)
    boot(" ".join(sys.argv[1:]))
    Cfg.debug = True
    print(format(Cfg, "debug,verbose,index,wd"))
    scan()
    c = CLI()
    c.start()
    thrs = []
    nrs = Cfg.index or 20
    for nr in range(nrs):
        launch(payload, c)
    consume(events)


wrap(main)
